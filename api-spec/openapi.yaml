openapi: 3.0.3
info:
  title: 'Adria Concept Title - Adria-12'
  description: 'Description of the Adria API - Adria-12'
  version: 0.0.1
servers:
  - url: https://project-2.ti.howest.be/2023-2024/group-12/
    description: 'Public API'
  - url: http://localhost:8080/
    description: 'Local API'
paths:
  /api/quotes:
    post:
      description: Create a nice quote
      operationId: createQuote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quote:
                  type: string
              required:
                - quote
            examples:
              the-future:
                value:
                  quote: The future depends on what you do today.
                description: You can't argue with the wise guy Mahatma Gandhi, can you?
          text/plain:
            schema:
              type: string
              example: "If everybody minded their own business, the world would go around a great deal faster than it does."
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/quote'
  /api/quotes/{quoteId}:
    get:
      description: Get a nice quote
      operationId: getQuote
      parameters:
        - in: path
          name: quoteId
          required: true
          schema:
            type: integer
          description: The quote id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/quote'
              examples:
                two infinite things:
                  value:
                    value: "Two things are infinite: the universe and human stupidity; and I'm not sure about the universe."
                    id: 21
                  description: Albert Einstein at his best :)
                finding magic:
                  value:
                    value: "Those who don't believe in magic will never find it."
                    id: 34
                  description: Who doesn't love Roald Dahl?
    put:
      description: Update nice quote
      operationId: updateQuote
      parameters:
        - in: path
          name: quoteId
          required: true
          schema:
            type: integer
          description: The quote ID
          example: 42
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quote:
                  type: string
              required:
                - quote
            examples:
              dragons exist:
                value:
                  quote: "Fairy tales are more than true: not because they tell us that dragons exist, but because they tell us that dragons can be beaten."
                description: Neil Gaiman, from the book Coraline
              mistakes do something:
                value:
                  quote: "I hope that in this year to come, you make mistakes. Because if you are making mistakes... you're Doing Something."
                description: Neil Gaiman is a genius.
      responses:
        '200':
          description: Created
    delete:
      description: Delete nice quote
      operationId: deleteQuote
      parameters:
        - in: path
          name: quoteId
          required: true
          schema:
            type: integer
          description: The quote Id
          example: 55
      responses:
        '200':
          description: Deleted
  /api/stations:
    get:
      description: Get present stations
      operationId: getStations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stations'
  /api/reservations:
    get:
      description: Get reservations
      operationId: getReservations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reservations'
    post:
      description: Create a reservation
      operationId: createReservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reservation'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reservation'
  /api/tracks:
    get:
      description: Get present tracks
      operationId: getTracks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tracks'
  /api/events:
    get:
      description: Search through events
      operationId: searchEvents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
      parameters:
        - in: query
          name: target
          schema:
            type: integer
          description: Only display events with exact target
          example: 5
        - in: query
          name: earliest
          schema:
            type: string
            format: date-time
          description: Only display events after earliest
          example: '2022-05-09 14:30:00'
        - in: query
          name: latest
          schema:
            type: string
            format: date-time
          description: Only display events before latest
          example: '2022-05-09 14:30:00'
        - in: query
          name: subject
          schema:
            type: string
          description: Only display events with exact subject
          example: 'MOVE'
    post:
      description: Push event
      operationId: pushEvent
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventProposal'

components:
  schemas:
    quote:
      type: object
      properties:
        value:
          type: string
          x-faker: lorem.sentence
          example: "Life is a disease: sexually transmitted, and invariably fatal."
        id:
          type: integer
          minimum: 1
          example: 8
      required:
        - value
        - id
      example:
        value: See, the problem is that God gives men a brain and a penis, and only enough blood to run one at a time.
        id: 89
    station:
      type: object
      properties:
        name:
          type: string
          example: "Adria"
        id:
          type: integer
          example: 8
        latitude:
          type: number
          minimum: -90
          maximum: 90
          example: 50.85292760248162
        longitude:
          type: number
          minimum: -90
          maximum: 90
          example: 4.351725442466426
      required:
        - name
        - id
        - latitude
        - longitude
      example:
        name: "Adria"
        id: 89
        latitude: 50.85292760248162
        longitude: 4.351725442466426
    stations:
      type: array
      items:
        $ref: '#/components/schemas/station'
    track:
      type: object
      properties:
        id:
          type: integer
          example: 24
        station1:
          $ref: '#/components/schemas/station'
        station2:
          $ref: '#/components/schemas/station'
    tracks:
      type: array
      items:
        $ref: '#/components/schemas/track'
    reservation:
      type: object
      properties:
        company:
          type: string
          example: 'John'
        periodStart:
          type: string
          format: date-time
          example: '2022-05-08 14:30:00'
        periodStop:
          type: string
          format: date-time
          example: '2022-05-09 14:30:00'
        route:
          type: array
          items:
            type: integer
            example: 89
      required:
        - company
        - periodStart
        - periodStop
        - route
    reservations:
      type: array
      items:
        $ref: '#/components/schemas/reservation'
    observable:
      type: object
      properties:
        id:
          type: integer
          example: 2
    event:
      type: object
      properties:
        target:
          $ref: '#/components/schemas/observable'
        moment:
          type: string
          format: date-time
          example: '2022-05-09 14:30:00'
        subject:
          type: string
          example: MOVE
        reason:
          type: string
          example: Snorlax on track
        latitude:
          type: number
          minimum: -90
          maximum: 90
          example: 20
        longitude:
          type: number
          minimum: -90
          maximum: 90
          example: 5
      required:
        - target
        - moment
        - subject
    events:
      type: array
      items:
        $ref: '#/components/schemas/event'
    eventProposal:
      type: object
      properties:
        target:
          type: number
          example: 1
        moment:
          type: string
          format: date-time
          example: '2022-05-09T14:30:00Z'
        subject:
          type: string
          example: MOVE
        reason:
          type: string
          example: Snorlax on track
        latitude:
          type: number
          minimum: -90
          maximum: 90
          example: 20
        longitude:
          type: number
          minimum: -90
          maximum: 90
          example: 5
      required:
        - target
        - moment
        - subject
        
        

